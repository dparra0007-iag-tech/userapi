[{"filePath":"/Users/david/Documents/Workspace/IAG/IB/userapi/userapi/app.js","messages":[{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":1,"column":1,"nodeType":"VariableDeclaration","endLine":1,"endColumn":34,"fix":{"range":[0,3],"text":"let"}},{"ruleId":"import/newline-after-import","severity":2,"message":"Expected 1 empty line after require statement not followed by another require.","line":4,"column":1,"nodeType":null,"fix":{"range":[118,118],"text":"\n"}},{"ruleId":"max-len","severity":2,"message":"Line 7 exceeds the maximum line length of 100.","line":7,"column":1,"nodeType":"Program"},{"ruleId":"object-curly-spacing","severity":2,"message":"A space is required after '{'.","line":7,"column":34,"nodeType":"ObjectExpression","fix":{"range":[231,231],"text":" "}},{"ruleId":"object-curly-spacing","severity":2,"message":"A space is required before '}'.","line":7,"column":100,"nodeType":"ObjectExpression","fix":{"range":[296,296],"text":" "}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":9,"column":1,"nodeType":"VariableDeclaration","endLine":9,"endColumn":28,"fix":{"range":[301,304],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":10,"column":1,"nodeType":"VariableDeclaration","endLine":10,"endColumn":40,"fix":{"range":[329,332],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'favicon' is assigned a value but never used.","line":10,"column":5,"nodeType":"Identifier","endLine":10,"endColumn":12},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":11,"column":1,"nodeType":"VariableDeclaration","endLine":11,"endColumn":45,"fix":{"range":[369,372],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":12,"column":1,"nodeType":"VariableDeclaration","endLine":12,"endColumn":41,"fix":{"range":[414,417],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":14,"column":1,"nodeType":"VariableDeclaration","endLine":14,"endColumn":32,"fix":{"range":[467,470],"text":"let"}},{"ruleId":"no-unused-vars","severity":2,"message":"'mongo' is assigned a value but never used.","line":14,"column":5,"nodeType":"Identifier","endLine":14,"endColumn":10},{"ruleId":"import/newline-after-import","severity":2,"message":"Expected 1 empty line after require statement not followed by another require.","line":15,"column":1,"nodeType":null,"fix":{"range":[526,526],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":15,"column":1,"nodeType":"VariableDeclaration","endLine":15,"endColumn":28,"fix":{"range":[499,502],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":16,"column":1,"nodeType":"VariableDeclaration","endLine":16,"endColumn":45,"fix":{"range":[527,530],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":18,"column":1,"nodeType":"VariableDeclaration","endLine":18,"endColumn":40,"fix":{"range":[573,576],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":20,"column":1,"nodeType":"VariableDeclaration","endLine":20,"endColumn":21,"fix":{"range":[614,617],"text":"let"}},{"ruleId":"import/newline-after-import","severity":2,"message":"Expected 1 empty line after require statement not followed by another require.","line":23,"column":1,"nodeType":null,"fix":{"range":[746,746],"text":"\n"}},{"ruleId":"import/order","severity":2,"message":"`zipkin-instrumentation-express` import should occur before import of `./routes/index`","line":23,"column":26,"nodeType":"CallExpression","endLine":23,"endColumn":67},{"ruleId":"object-curly-spacing","severity":2,"message":"A space is required after '{'.","line":24,"column":26,"nodeType":"ObjectExpression","fix":{"range":[773,773],"text":" "}},{"ruleId":"object-curly-spacing","severity":2,"message":"A space is required before '}'.","line":24,"column":33,"nodeType":"ObjectExpression","fix":{"range":[779,779],"text":" "}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '//' in comment.","line":30,"column":1,"nodeType":"Line","endLine":30,"endColumn":9,"fix":{"range":[890,890],"text":" "}},{"ruleId":"object-shorthand","severity":2,"message":"Expected method shorthand.","line":32,"column":3,"nodeType":"Property","endLine":34,"endColumn":4,"fix":{"range":[942,994],"text":"genReqId(req) {\n     return tracer.id;\n  }"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed method 'genReqId'.","line":32,"column":13,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":34,"endColumn":4},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":32,"column":21,"nodeType":"FunctionExpression","fix":{"range":[960,960],"text":" "}},{"ruleId":"no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":32,"column":22,"nodeType":"Identifier","endLine":32,"endColumn":25},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 5.","line":33,"column":1,"nodeType":"Keyword","endLine":33,"endColumn":6,"fix":{"range":[968,973],"text":"    "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":34,"column":4,"nodeType":"Property","messageId":"missing","fix":{"range":[994,994],"text":","}},{"ruleId":"spaced-comment","severity":2,"message":"Expected exception block, space or tab after '/*' in comment.","line":36,"column":1,"nodeType":"Block","endLine":50,"endColumn":7,"fix":{"range":[1002,1002],"text":" "}},{"ruleId":"spaced-comment","severity":2,"message":"Expected space or tab before '*/' in comment.","line":36,"column":1,"nodeType":"Block","endLine":50,"endColumn":7,"fix":{"range":[1424,1424],"text":" "}},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":58,"column":9,"nodeType":"FunctionExpression","endLine":61,"endColumn":2,"fix":{"range":[1640,1694],"text":"(req,res,next) => {\n    req.db = db;\n    next();\n}"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":58,"column":9,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":61,"endColumn":2},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":58,"column":17,"nodeType":"FunctionExpression","fix":{"range":[1648,1648],"text":" "}},{"ruleId":"comma-spacing","severity":2,"message":"A space is required after ','.","line":58,"column":21,"nodeType":"Punctuator","messageId":"missing","endLine":58,"endColumn":22,"fix":{"range":[1653,1653],"text":" "}},{"ruleId":"comma-spacing","severity":2,"message":"A space is required after ','.","line":58,"column":25,"nodeType":"Punctuator","messageId":"missing","endLine":58,"endColumn":26,"fix":{"range":[1657,1657],"text":" "}},{"ruleId":"space-before-blocks","severity":2,"message":"Missing space before opening brace.","line":58,"column":31,"nodeType":"BlockStatement","endLine":61,"endColumn":2,"fix":{"range":[1662,1662],"text":" "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":59,"column":1,"nodeType":"Identifier","endLine":59,"endColumn":5,"fix":{"range":[1664,1668],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 4.","line":60,"column":1,"nodeType":"Identifier","endLine":60,"endColumn":5,"fix":{"range":[1681,1685],"text":"  "}},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":66,"column":9,"nodeType":"FunctionExpression","endLine":70,"endColumn":2,"fix":{"range":[1782,1879],"text":"(req, res, next) => {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n}"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":66,"column":9,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":70,"endColumn":2},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":66,"column":17,"nodeType":"FunctionExpression","fix":{"range":[1790,1790],"text":" "}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":67,"column":3,"nodeType":"VariableDeclaration","endLine":67,"endColumn":36,"fix":{"range":[1811,1814],"text":"let"}},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":77,"column":11,"nodeType":"FunctionExpression","endLine":83,"endColumn":4,"fix":{"range":[2006,2137],"text":"(err, req, res, next) => {\n    res.status( err.code || 500 )\n    .json({\n      status: 'error',\n      message: err\n    });\n  }"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":77,"column":11,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":83,"endColumn":4},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":77,"column":19,"nodeType":"FunctionExpression","fix":{"range":[2014,2014],"text":" "}},{"ruleId":"no-unused-vars","severity":2,"message":"'next' is defined but never used.","line":77,"column":35,"nodeType":"Identifier","endLine":77,"endColumn":39},{"ruleId":"space-in-parens","severity":2,"message":"There should be no spaces inside this paren.","line":78,"column":15,"nodeType":"Program","fix":{"range":[2053,2054],"text":""}},{"ruleId":"space-in-parens","severity":2,"message":"There should be no spaces inside this paren.","line":78,"column":33,"nodeType":"Program","fix":{"range":[2069,2070],"text":""}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 4.","line":79,"column":1,"nodeType":"Punctuator","endLine":79,"endColumn":5,"fix":{"range":[2072,2076],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 6.","line":80,"column":1,"nodeType":"Identifier","endLine":80,"endColumn":7,"fix":{"range":[2084,2090],"text":"        "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 6.","line":81,"column":1,"nodeType":"Identifier","endLine":81,"endColumn":7,"fix":{"range":[2107,2113],"text":"        "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":81,"column":19,"nodeType":"Property","messageId":"missing","fix":{"range":[2125,2125],"text":","}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 4.","line":82,"column":1,"nodeType":"Punctuator","endLine":82,"endColumn":5,"fix":{"range":[2126,2130],"text":"      "}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":88,"column":9,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":94,"endColumn":2},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":88,"column":9,"nodeType":"FunctionExpression","endLine":94,"endColumn":2,"fix":{"range":[2212,2339],"text":"(err, req, res, next) => {\n  res.status(err.status || 500)\n  .json({\n    status: 'error',\n    message: err.message\n  });\n}"}},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":88,"column":17,"nodeType":"FunctionExpression","fix":{"range":[2220,2220],"text":" "}},{"ruleId":"no-unused-vars","severity":2,"message":"'next' is defined but never used.","line":88,"column":33,"nodeType":"Identifier","endLine":88,"endColumn":37},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":90,"column":1,"nodeType":"Punctuator","endLine":90,"endColumn":3,"fix":{"range":[2276,2278],"text":"    "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 4.","line":91,"column":1,"nodeType":"Identifier","endLine":91,"endColumn":5,"fix":{"range":[2286,2290],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 4.","line":92,"column":1,"nodeType":"Identifier","endLine":92,"endColumn":5,"fix":{"range":[2307,2311],"text":"      "}},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":92,"column":25,"nodeType":"Property","messageId":"missing","fix":{"range":[2331,2331],"text":","}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 4 spaces but found 2.","line":93,"column":1,"nodeType":"Punctuator","endLine":93,"endColumn":3,"fix":{"range":[2332,2334],"text":"    "}}],"errorCount":57,"warningCount":5,"fixableErrorCount":50,"fixableWarningCount":0,"source":"var express = require('express');\n\nconst CLSContext = require('zipkin-context-cls');\nconst zipkin = require('zipkin');\nconst ctxImpl = new CLSContext('zipkin');\nconst localServiceName = 'userapi';\nconst tracer = new zipkin.Tracer({ctxImpl, recorder: new zipkin.ConsoleRecorder(), localServiceName});\n\nvar path = require('path');\nvar favicon = require('serve-favicon');\nvar cookieParser = require('cookie-parser');\nvar bodyParser = require('body-parser');\n// Database\nvar mongo = require('mongodb');\nvar monk = require('monk');\nvar db = monk('userapi-db:27017/nodetest2');\n\nvar routes = require('./routes/index');\n\nvar app = express();\n\n// instrument the server\nconst zipkinMiddleware = require('zipkin-instrumentation-express').expressMiddleware;\napp.use(zipkinMiddleware({tracer}));\n\n// view engine setup\napp.set('views', path.join(__dirname, 'views'));\napp.set('view engine', 'jade');\n\n//logger\napp.use(require('express-bunyan-logger')({\n  genReqId: function(req) {\n     return tracer.id;\n  }\n}));\n/*var log = bunyan.createLogger({\n  name: 'userapi',\n  serializers: { // add serializers for req, res and err\n      req: bunyan.stdSerializers.req,\n      req: bunyan.stdSerializers.res,\n      err: bunyan.stdSerializers.err\n  },\n  'X-B3-TraceId': tracer.id,\n  'X-B3-SpanId': tracer.id\n});\nvar express_logger = log.child({type: 'express', key: value});\n\napp.use(require('express-bunyan-logger')({\n  logger: express_logger\n}));*/\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: false }));\napp.use(cookieParser());\napp.use(express.static(path.join(__dirname, 'public')));\n\n// Make our db accessible to our router\napp.use(function(req,res,next){\n    req.db = db;\n    next();\n});\n\napp.use('/userapi/1.0', routes);\n\n// catch 404 and forward to error handler\napp.use(function(req, res, next) {\n  var err = new Error('Not Found');\n  err.status = 404;\n  next(err);\n});\n\n// error handlers\n\n// development error handler\n// will print stacktrace\nif (app.get('env') === 'development') {\n  app.use(function(err, req, res, next) {\n    res.status( err.code || 500 )\n    .json({\n      status: 'error',\n      message: err\n    });\n  });\n}\n\n// production error handler\n// no stacktraces leaked to user\napp.use(function(err, req, res, next) {\n  res.status(err.status || 500)\n  .json({\n    status: 'error',\n    message: err.message\n  });\n});\n\n\nmodule.exports = app;\n"},{"filePath":"/Users/david/Documents/Workspace/IAG/IB/userapi/userapi/routes/index.js","messages":[{"ruleId":"import/newline-after-import","severity":2,"message":"Expected 1 empty line after require statement not followed by another require.","line":1,"column":1,"nodeType":null,"fix":{"range":[33,33],"text":"\n"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":1,"column":1,"nodeType":"VariableDeclaration","endLine":1,"endColumn":34,"fix":{"range":[0,3],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":2,"column":1,"nodeType":"VariableDeclaration","endLine":2,"endColumn":31,"fix":{"range":[34,37],"text":"let"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 0.","line":6,"column":1,"nodeType":"Punctuator","endLine":6,"endColumn":1,"fix":{"range":[91,91],"text":"  "}},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":6,"column":6,"nodeType":"FunctionExpression","endLine":12,"endColumn":2,"fix":{"range":[96,256],"text":"(req, res) => {\n    var db = req.db;\n    var collection = db.get('userlist');\n    collection.find({},{},function(e,docs){\n        res.json(docs);\n    });\n}"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":6,"column":6,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":12,"endColumn":2},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":6,"column":14,"nodeType":"FunctionExpression","fix":{"range":[104,104],"text":" "}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":7,"column":5,"nodeType":"VariableDeclaration","endLine":7,"endColumn":21,"fix":{"range":[121,124],"text":"let"}},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":7,"column":9,"nodeType":"VariableDeclarator","endLine":7,"endColumn":20},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":8,"column":5,"nodeType":"VariableDeclaration","endLine":8,"endColumn":41,"fix":{"range":[142,145],"text":"let"}},{"ruleId":"comma-spacing","severity":2,"message":"A space is required after ','.","line":9,"column":23,"nodeType":"Punctuator","messageId":"missing","endLine":9,"endColumn":24,"fix":{"range":[202,202],"text":" "}},{"ruleId":"comma-spacing","severity":2,"message":"A space is required after ','.","line":9,"column":26,"nodeType":"Punctuator","messageId":"missing","endLine":9,"endColumn":27,"fix":{"range":[205,205],"text":" "}},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":9,"column":27,"nodeType":"FunctionExpression","endLine":11,"endColumn":6,"fix":{"range":[205,252],"text":"(e,docs) => {\n        res.json(docs);\n    }"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":9,"column":27,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":11,"endColumn":6},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":9,"column":35,"nodeType":"FunctionExpression","fix":{"range":[213,213],"text":" "}},{"ruleId":"comma-spacing","severity":2,"message":"A space is required after ','.","line":9,"column":37,"nodeType":"Punctuator","messageId":"missing","endLine":9,"endColumn":38,"fix":{"range":[216,216],"text":" "}},{"ruleId":"space-before-blocks","severity":2,"message":"Missing space before opening brace.","line":9,"column":43,"nodeType":"BlockStatement","endLine":11,"endColumn":6,"fix":{"range":[221,221],"text":" "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":10,"column":1,"nodeType":"Identifier","endLine":10,"endColumn":9,"fix":{"range":[223,231],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 0.","line":12,"column":1,"nodeType":"Punctuator","endLine":12,"endColumn":1,"fix":{"range":[255,255],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 0.","line":14,"column":1,"nodeType":"Punctuator","endLine":14,"endColumn":1,"fix":{"range":[259,259],"text":"  "}},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":14,"column":7,"nodeType":"FunctionExpression","endLine":25,"endColumn":2,"fix":{"range":[265,799],"text":"(req, res) => {\n    if(req.query['clean'] === 'true') delete require.cache[require.resolve('/usr/src/dynamic-conf/default.json')];\n    var config = require('/usr/src/dynamic-conf/default.json');\n    var extraMessage = config.Userapi.Extra.message;\n    var db = req.db;\n    var collection = db.get('userlist');\n    collection.insert(req.body, function(err, result){\n        res.send(\n            (err === null) ? { msg: process.env.USERAPI_ADDMESSAGE + extraMessage } : { msg: process.env.USERAPI_ERRMESSAGE }\n        );\n    });\n}"}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":14,"column":7,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":25,"endColumn":2},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":14,"column":15,"nodeType":"FunctionExpression","fix":{"range":[273,273],"text":" "}},{"ruleId":"keyword-spacing","severity":2,"message":"Expected space(s) after \"if\".","line":15,"column":5,"nodeType":null,"fix":{"range":[292,292],"text":" "}},{"ruleId":"dot-notation","severity":2,"message":"[\"clean\"] is better written in dot notation.","line":15,"column":18,"nodeType":"Literal","messageId":"useDot","endLine":15,"endColumn":25,"fix":{"range":[302,311],"text":".clean"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":16,"column":5,"nodeType":"VariableDeclaration","endLine":16,"endColumn":64,"fix":{"range":[405,408],"text":"let"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":16,"column":5,"nodeType":"VariableDeclaration","endLine":16,"endColumn":64},{"ruleId":"global-require","severity":2,"message":"Unexpected require().","line":16,"column":18,"nodeType":"CallExpression","endLine":16,"endColumn":63},{"ruleId":"import/no-absolute-path","severity":2,"message":"Do not import modules using an absolute path","line":16,"column":26,"nodeType":"Literal","endLine":16,"endColumn":62},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '/usr/src/dynamic-conf/default.json'.","line":16,"column":26,"nodeType":"Literal","endLine":16,"endColumn":62},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":17,"column":5,"nodeType":"VariableDeclaration","endLine":17,"endColumn":53,"fix":{"range":[469,472],"text":"let"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":17,"column":5,"nodeType":"VariableDeclaration","endLine":17,"endColumn":53},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":18,"column":5,"nodeType":"VariableDeclaration","endLine":18,"endColumn":21,"fix":{"range":[522,525],"text":"let"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":18,"column":5,"nodeType":"VariableDeclaration","endLine":18,"endColumn":21},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":18,"column":9,"nodeType":"VariableDeclarator","endLine":18,"endColumn":20},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":19,"column":5,"nodeType":"VariableDeclaration","endLine":19,"endColumn":41,"fix":{"range":[543,546],"text":"let"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":19,"column":5,"nodeType":"VariableDeclaration","endLine":19,"endColumn":41},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":20,"column":33,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":24,"endColumn":6},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":20,"column":33,"nodeType":"FunctionExpression","endLine":24,"endColumn":6,"fix":{"range":[612,795],"text":"(err, result) => {\n        res.send(\n            (err === null) ? { msg: process.env.USERAPI_ADDMESSAGE + extraMessage } : { msg: process.env.USERAPI_ERRMESSAGE }\n        );\n    }"}},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":20,"column":41,"nodeType":"FunctionExpression","fix":{"range":[620,620],"text":" "}},{"ruleId":"no-unused-vars","severity":2,"message":"'result' is defined but never used.","line":20,"column":47,"nodeType":"Identifier","endLine":20,"endColumn":53},{"ruleId":"space-before-blocks","severity":2,"message":"Missing space before opening brace.","line":20,"column":54,"nodeType":"BlockStatement","endLine":24,"endColumn":6,"fix":{"range":[633,633],"text":" "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":21,"column":1,"nodeType":"Identifier","endLine":21,"endColumn":9,"fix":{"range":[635,643],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 8 spaces but found 12.","line":22,"column":1,"nodeType":"Punctuator","endLine":22,"endColumn":13,"fix":{"range":[653,665],"text":"        "}},{"ruleId":"max-len","severity":2,"message":"Line 22 exceeds the maximum line length of 100.","line":22,"column":1,"nodeType":"Program"},{"ruleId":"comma-dangle","severity":2,"message":"Missing trailing comma.","line":22,"column":126,"nodeType":"ConditionalExpression","messageId":"missing","fix":{"range":[778,778],"text":","}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":23,"column":1,"nodeType":"Punctuator","endLine":23,"endColumn":9,"fix":{"range":[779,787],"text":"      "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 0.","line":25,"column":1,"nodeType":"Punctuator","endLine":25,"endColumn":1,"fix":{"range":[798,798],"text":"  "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 0.","line":29,"column":1,"nodeType":"Punctuator","endLine":29,"endColumn":1,"fix":{"range":[831,831],"text":"  "}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":29,"column":9,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":39,"endColumn":2},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":29,"column":9,"nodeType":"FunctionExpression","endLine":39,"endColumn":2,"fix":{"range":[839,1409],"text":"(req, res) => {\n    if(req.query['clean'] === 'true') delete require.cache[require.resolve('/usr/src/dynamic-conf/default.json')];\n    var config = require('/usr/src/dynamic-conf/default.json');\n    var extraMessage = config.Userapi.Extra.message;\n    var db = req.db;\n    var collection = db.get('userlist');\n    var userToDelete = req.params.id;\n    collection.remove({ '_id' : userToDelete }, function(err) {\n        res.send((err === null) ? { msg: process.env.USERAPI_DELMESSAGE + extraMessage } : { msg:'error: ' + process.env.USERAPI_ERRMESSAGE });\n    });\n}"}},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":29,"column":17,"nodeType":"FunctionExpression","fix":{"range":[847,847],"text":" "}},{"ruleId":"keyword-spacing","severity":2,"message":"Expected space(s) after \"if\".","line":30,"column":5,"nodeType":null,"fix":{"range":[866,866],"text":" "}},{"ruleId":"dot-notation","severity":2,"message":"[\"clean\"] is better written in dot notation.","line":30,"column":18,"nodeType":"Literal","messageId":"useDot","endLine":30,"endColumn":25,"fix":{"range":[876,885],"text":".clean"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":31,"column":5,"nodeType":"VariableDeclaration","endLine":31,"endColumn":64},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":31,"column":5,"nodeType":"VariableDeclaration","endLine":31,"endColumn":64,"fix":{"range":[979,982],"text":"let"}},{"ruleId":"global-require","severity":2,"message":"Unexpected require().","line":31,"column":18,"nodeType":"CallExpression","endLine":31,"endColumn":63},{"ruleId":"import/no-unresolved","severity":2,"message":"Unable to resolve path to module '/usr/src/dynamic-conf/default.json'.","line":31,"column":26,"nodeType":"Literal","endLine":31,"endColumn":62},{"ruleId":"import/no-absolute-path","severity":2,"message":"Do not import modules using an absolute path","line":31,"column":26,"nodeType":"Literal","endLine":31,"endColumn":62},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":32,"column":5,"nodeType":"VariableDeclaration","endLine":32,"endColumn":53},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":32,"column":5,"nodeType":"VariableDeclaration","endLine":32,"endColumn":53,"fix":{"range":[1043,1046],"text":"let"}},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":33,"column":5,"nodeType":"VariableDeclaration","endLine":33,"endColumn":21,"fix":{"range":[1096,1099],"text":"let"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":33,"column":5,"nodeType":"VariableDeclaration","endLine":33,"endColumn":21},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":33,"column":9,"nodeType":"VariableDeclarator","endLine":33,"endColumn":20},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":34,"column":5,"nodeType":"VariableDeclaration","endLine":34,"endColumn":41},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":34,"column":5,"nodeType":"VariableDeclaration","endLine":34,"endColumn":41,"fix":{"range":[1117,1120],"text":"let"}},{"ruleId":"vars-on-top","severity":2,"message":"All 'var' declarations must be at the top of the function scope.","line":35,"column":5,"nodeType":"VariableDeclaration","endLine":35,"endColumn":38},{"ruleId":"no-var","severity":2,"message":"Unexpected var, use let or const instead.","line":35,"column":5,"nodeType":"VariableDeclaration","endLine":35,"endColumn":38,"fix":{"range":[1158,1161],"text":"let"}},{"ruleId":"quote-props","severity":2,"message":"Unnecessarily quoted property '_id' found.","line":36,"column":25,"nodeType":"Property","endLine":36,"endColumn":45,"fix":{"range":[1216,1221],"text":"_id"}},{"ruleId":"key-spacing","severity":2,"message":"Extra space after key '_id'.","line":36,"column":25,"nodeType":"Literal","fix":{"range":[1221,1222],"text":""}},{"ruleId":"func-names","severity":1,"message":"Unexpected unnamed function.","line":36,"column":49,"nodeType":"FunctionExpression","messageId":"unnamed","endLine":38,"endColumn":6},{"ruleId":"prefer-arrow-callback","severity":2,"message":"Unexpected function expression.","line":36,"column":49,"nodeType":"FunctionExpression","endLine":38,"endColumn":6,"fix":{"range":[1240,1405],"text":"(err) => {\n        res.send((err === null) ? { msg: process.env.USERAPI_DELMESSAGE + extraMessage } : { msg:'error: ' + process.env.USERAPI_ERRMESSAGE });\n    }"}},{"ruleId":"space-before-function-paren","severity":2,"message":"Missing space before function parentheses.","line":36,"column":57,"nodeType":"FunctionExpression","fix":{"range":[1248,1248],"text":" "}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 6 spaces but found 8.","line":37,"column":1,"nodeType":"Identifier","endLine":37,"endColumn":9,"fix":{"range":[1256,1264],"text":"      "}},{"ruleId":"key-spacing","severity":2,"message":"Missing space before value for key 'msg'.","line":37,"column":98,"nodeType":"BinaryExpression","fix":{"range":[1353,1353],"text":" "}},{"ruleId":"prefer-template","severity":2,"message":"Unexpected string concatenation.","line":37,"column":98,"nodeType":"BinaryExpression","endLine":37,"endColumn":140,"fix":{"range":[1353,1395],"text":"`error: ${  process.env.USERAPI_ERRMESSAGE}`"}},{"ruleId":"indent","severity":2,"message":"Expected indentation of 2 spaces but found 0.","line":39,"column":1,"nodeType":"Punctuator","endLine":39,"endColumn":1,"fix":{"range":[1408,1408],"text":"  "}},{"ruleId":"eol-last","severity":2,"message":"Newline required at end of file but not found.","line":41,"column":25,"nodeType":"Program","messageId":"missing","fix":{"range":[1437,1437],"text":"\n"}}],"errorCount":72,"warningCount":6,"fixableErrorCount":52,"fixableWarningCount":0,"source":"var express = require('express');\nvar router = express.Router();\n\nrouter.route('/users/')\n\n.get(function(req, res) {\n    var db = req.db;\n    var collection = db.get('userlist');\n    collection.find({},{},function(e,docs){\n        res.json(docs);\n    });\n})\n\n.post(function(req, res) {\n    if(req.query['clean'] === 'true') delete require.cache[require.resolve('/usr/src/dynamic-conf/default.json')];\n    var config = require('/usr/src/dynamic-conf/default.json');\n    var extraMessage = config.Userapi.Extra.message;\n    var db = req.db;\n    var collection = db.get('userlist');\n    collection.insert(req.body, function(err, result){\n        res.send(\n            (err === null) ? { msg: process.env.USERAPI_ADDMESSAGE + extraMessage } : { msg: process.env.USERAPI_ERRMESSAGE }\n        );\n    });\n});\n\nrouter.route('/users/:id')\n\n.delete(function(req, res) {\n    if(req.query['clean'] === 'true') delete require.cache[require.resolve('/usr/src/dynamic-conf/default.json')];\n    var config = require('/usr/src/dynamic-conf/default.json');\n    var extraMessage = config.Userapi.Extra.message;\n    var db = req.db;\n    var collection = db.get('userlist');\n    var userToDelete = req.params.id;\n    collection.remove({ '_id' : userToDelete }, function(err) {\n        res.send((err === null) ? { msg: process.env.USERAPI_DELMESSAGE + extraMessage } : { msg:'error: ' + process.env.USERAPI_ERRMESSAGE });\n    });\n});\n\nmodule.exports = router;"}]