image: iaghcp-docker-technical-architecture.jfrog.io/docker:1.1.0

services:
  - name: iaghcp-docker-technical-architecture.jfrog.io/docker-dind:1.0.0
    alias: docker

stages:
- build code
- test code
- build application
- review application
- test application
- push binaries
- deploy application
- regression test deploy
- cleanup

variables:
  IMAGE_NAME: userapi
  IMAGE_DB_NAME: userapi-db
  IMAGE_APIGATEWAY_NAME: userapi-apigateway
  IMAGE_DISCOVERY_NAME: userapi-discovery
  URL_GLP_REGISTRY: https://iaghcp.jfrog.io/iaghcp/api/docker/docker-glp/v2/$IMAGE_NAME
  TECH_ARCH_REGISTRY: iaghcp-docker-technical-architecture.jfrog.io
  GLP_REGISTRY: iaghcp-docker-glp.jfrog.io
  CONTAINER_SERVICE_IMAGE: iaghcp-docker-glp.jfrog.io/userapi/userapi
  CONTAINER_DB_IMAGE: iaghcp-docker-glp.jfrog.io/userapi/userapi-db
  CONTAINER_APIGATEWAY_IMAGE: iaghcp-docker-glp.jfrog.io/userapi/userapi-apigateway
  CONTAINER_DISCOVERY_IMAGE: iaghcp-docker-glp.jfrog.io/userapi/userapi-discovery
  BUILD_NAME: $CI_PROJECT_NAME
  GITLAB_SERVICE_REGISTRY: registry.gitlab.com/iag-dev/glp/userapi/userapi
  GITLAB_DB_REGISTRY: registry.gitlab.com/iag-dev/glp/userapi/userapi-db
  GITLAB_APIGATEWAY_REGISTRY: registry.gitlab.com/iag-dev/glp/userapi/userapi-apigateway
  GITLAB_DISCOVERY_REGISTRY: registry.gitlab.com/iag-dev/glp/userapi/userapi-discovery

build_service_node:
  stage: build code
  image: iaghcp-docker-technical-architecture.jfrog.io/node:latest
  before_script:
    - cd ./userapi
    # Install JFrog CLI
    - curl -fL https://getcli.jfrog.io | sh
    # Configure Artifactory instance with JFrog CLI
    - ./jfrog rt config --url=$ARTIFACTORY_URL --user=$ARTIFACTORY_USER --password=$ARTIFACTORY_PASS
    - ./jfrog rt c show
  script:
    # Run the npm install command
    - ./jfrog rt npmi $ARTIFACTORY_NPM_REPOSITORY --build-name=userapi-$BUILD_NAME --build-number=$CI_PIPELINE_ID
    # Collect the environment variables
    - ./jfrog rt bce userapi-$BUILD_NAME $CI_PIPELINE_ID
    # Publish the package
    - ./jfrog rt npmp $ARTIFACTORY_NPM_REPOSITORY --build-name=userapi-$BUILD_NAME --build-number=$CI_PIPELINE_ID
    # Pass the build information to Artifactory
    - ./jfrog rt bp userapi-$BUILD_NAME $CI_PIPELINE_ID
  except:
    - triggers

static_test_service:
  stage: test code
  image: iaghcp-docker-technical-architecture.jfrog.io/sonar-scanner:2.0.1
  variables:
    PROJECT_KEY: "$CI_PROJECT_NAMESPACE:$CI_PROJECT_NAME"
  before_script:
    - npm install eslint -g
    - npm install eslint-config-airbnb-base -g
    - npm install eslint-plugin-import -g
  script:
    - cd ./userapi
    - npm install
    - eslint -f json -o report.json .
    - rm -rf node_modules/
    # - sonar-scanner
    #  -Dsonar.projectKey=${PROJECT_KEY//[\/]/_} 
    #  -Dsonar.projectName=$CI_PROJECT_NAME 
    #  -Dsonar.branch.name=$CI_COMMIT_REF_NAME 
    #  -Dsonar.projectVersion=$CI_JOB_ID 
    #  -Dsonar.sources=./ 
    #  -Donar.eslint.reportPaths=report.json 
    #  -Dsonar.gitlab.project_id=$CI_PROJECT_ID 
    #  -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
    #  -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME

    - sonar-scanner
     -Dsonar.projectKey=${PROJECT_KEY//[\/]/_} 
     -Dsonar.projectName=$CI_PROJECT_NAME 
     -Dsonar.projectVersion=$CI_JOB_ID 
     -Dsonar.sources=./ 
     -Donar.eslint.reportPaths=report.json 
     -Dsonar.gitlab.project_id=$CI_PROJECT_ID 
     -Dsonar.gitlab.commit_sha=$CI_COMMIT_SHA 
     -Dsonar.gitlab.ref_name=$CI_COMMIT_REF_NAME
  except:
    - triggers

build_service:
  stage: build application
  variables:
    BASH: /usr/local/bin/
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - make build PATH=./userapi SERVICE_REGISTRY=$GITLAB_SERVICE_REGISTRY BASH=$BASH
    - docker tag $GITLAB_SERVICE_REGISTRY $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
    - docker push $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
  except:
    - triggers

build_discovery:
  stage: build application
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build -t $GITLAB_DISCOVERY_REGISTRY ./userapi-discovery
    - docker tag $GITLAB_DISCOVERY_REGISTRY $GITLAB_DISCOVERY_REGISTRY:$CI_COMMIT_REF_NAME
    - docker push $GITLAB_DISCOVERY_REGISTRY:$CI_COMMIT_REF_NAME
  except:
    - triggers

build_apigateway:
  stage: build application
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build -t $GITLAB_APIGATEWAY_REGISTRY ./userapi-apigateway
    - docker tag $GITLAB_APIGATEWAY_REGISTRY $GITLAB_APIGATEWAY_REGISTRY:$CI_COMMIT_REF_NAME
    - docker push $GITLAB_APIGATEWAY_REGISTRY:$CI_COMMIT_REF_NAME
  except:
    - triggers

build_db:
  stage: build application
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker build -t $GITLAB_DB_REGISTRY ./userapi-db
    - docker tag $GITLAB_DB_REGISTRY $GITLAB_DB_REGISTRY:$CI_COMMIT_REF_NAME
    - docker push $GITLAB_DB_REGISTRY:$CI_COMMIT_REF_NAME
  except:
    - triggers

.deploy: &deploy
  image: iaghcp-docker-technical-architecture.jfrog.io/openshift-cli:1.1.0
  script:

    - cp $DEPLOYMENT_FILE deployment-$CI_BUILD_REF_NAME.yml

    - sed -i -e "s/{{TAG_SERVICE}}/$CI_TAG_SERVICE/g" deployment-$CI_BUILD_REF_NAME.yml
    - sed -i -e "s/{{TAG_DB}}/$CI_TAG_DB/g" deployment-$CI_BUILD_REF_NAME.yml
    - sed -i -e "s/{{TAG_APIGATEWAY}}/$CI_TAG_APIGATEWAY/g" deployment-$CI_BUILD_REF_NAME.yml
    - sed -i -e "s/{{TAG_DISCOVERY}}/$CI_TAG_DISCOVERY/g" deployment-$CI_BUILD_REF_NAME.yml

    - sed -i -e "s#{{IMG_SERVICE}}#$CI_IMG_SERVICE#g" deployment-$CI_BUILD_REF_NAME.yml
    - sed -i -e "s#{{IMG_DB}}#$CI_IMG_DB#g" deployment-$CI_BUILD_REF_NAME.yml
    - sed -i -e "s#{{IMG_APIGATEWAY}}#$CI_IMG_APIGATEWAY#g" deployment-$CI_BUILD_REF_NAME.yml
    - sed -i -e "s#{{IMG_DISCOVERY}}#$CI_IMG_DISCOVERY#g" deployment-$CI_BUILD_REF_NAME.yml

    - sed -i -e "s/{{TAG_GLOBALCONF}}/$TAG_GLOBALCONF/g" deployment-$CI_BUILD_REF_NAME.yml
    - sed -i -e "s/{{TAG_SYSTEMCONF}}/$TAG_SYSTEMCONF/g" deployment-$CI_BUILD_REF_NAME.yml
    - sed -i -e "s/{{REMOTE_APPSETTINGS}}/$REMOTE_APPSETTINGS/g" deployment-$CI_BUILD_REF_NAME.yml

    - oc login $OC_URL --token $OC_TOKEN --insecure-skip-tls-verify
    - oc project "$PROJECT" 2> /dev/null || oc new-project "$PROJECT"
    - oc describe secret $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME || ( oc create secret docker-registry $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME
     --docker-server=gitlab.com 
     --docker-username=$GITLAB_REGISTRY_USER_FROM_OC 
     --docker-password=$GITLAB_REGISTRY_PASS_FROM_OC 
     --docker-email=$GITLAB_REGISTRY_EMAIL_FROM_OC && 
     oc secrets link default $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME --for=pull && 
     oc secrets link deployer $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME --for=pull && 
     oc secrets link builder $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME --for=pull )
    - oc describe secret $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-registry || ( oc create secret docker-registry $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-registry
     --docker-server=registry.gitlab.com 
     --docker-username=$GITLAB_REGISTRY_USER_FROM_OC 
     --docker-password=$GITLAB_REGISTRY_PASS_FROM_OC 
     --docker-email=$GITLAB_REGISTRY_EMAIL_FROM_OC && 
     oc secrets link default $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-registry --for=pull && 
     oc secrets link deployer $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-registry --for=pull && 
     oc secrets link builder $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME-registry --for=pull )
    - make deploy DEPLOYMENT_FILE=deployment-$CI_BUILD_REF_NAME.yml
  artifacts:
    paths:
      - deployment-$CI_BUILD_REF_NAME.yml

review:
  <<: *deploy
  stage: review application
  variables:
    OPENSHIFT_DOMAIN: dit-iaggs.com
    PROJECT: $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME
    DEPLOYMENT_FILE: deployment-review.yml
    OC_URL: $OC_URL_STG
    OC_TOKEN: $OC_TOKEN_STG

    CI_TAG_SERVICE: $CI_COMMIT_REF_NAME
    CI_TAG_DB: $CI_COMMIT_REF_NAME
    CI_TAG_APIGATEWAY: $CI_COMMIT_REF_NAME
    CI_TAG_DISCOVERY: $CI_COMMIT_REF_NAME
    CI_IMG_SERVICE: $GITLAB_SERVICE_REGISTRY
    CI_IMG_DB: $GITLAB_DB_REGISTRY
    CI_IMG_APIGATEWAY: $GITLAB_APIGATEWAY_REGISTRY
    CI_IMG_DISCOVERY: $GITLAB_DISCOVERY_REGISTRY
    TAG_GLOBALCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/stg\/env.sh'
    TAG_SYSTEMCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/glp-userapi-stg\/env.sh'
    REMOTE_APPSETTINGS: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-USERAPI-CONFIG\/stg\/default.json'
  environment:
    name: $CI_PROJECT_NAME/$CI_BUILD_REF_NAME
    url: http://userapi-apigateway-$CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME.$OPENSHIFT_DOMAIN
    on_stop: stop-review
  only:
    - branches
  except:
    - master

validate_api_description:
  stage: test application
  before_script:
    - apk update
    - apk upgrade
    - curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - apk add --no-cache python3 py3-pip python3-dev
    - apk add --no-cache openssl-dev libffi-dev build-base
    - pip3 install --upgrade pip
    - pip3 install --upgrade setuptools
    - pip3 install cffi
    - pip3 install docker-compose
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - export TAG=$CI_COMMIT_REF_NAME 
    - docker-compose -f docker-compose.design.test.yml up -d
    - sleep 90s
    - docker logs $(docker ps -a --filter "name=userapi_userapi-design-test_1" --format "{{.ID}}")
  after_script:
    - docker stop $(docker ps -a --filter status=running --format "{{.ID}}") > /dev/null
    - docker rm $(docker ps -a -q) -f > /dev/null
    - docker rmi $(docker images -q) -f > /dev/null || true
  only:
    - master
  except:
    - triggers

functional_test_service:
  stage: test application
  before_script:
    - apk update
    - apk upgrade
    - curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - apk add --no-cache python3 py3-pip python3-dev
    - apk add --no-cache openssl-dev libffi-dev build-base
    - pip3 install --upgrade pip
    - pip3 install --upgrade setuptools
    - pip3 install cffi
    - pip3 install docker-compose
    - >-
      export token=$(curl -H "Content-Type: application/json" -X POST --data "{ \"client_id\": \"$JIRA_CLIENT_ID\",\"client_secret\": \"$JIRA_SECRET_ID\" }" https://xray.cloud.xpand-it.com/api/v1/authenticate| tr -d '"')
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - export TAG=$CI_COMMIT_REF_NAME 
    - docker-compose -f docker-compose.functional.test.yml up -d
    - sleep 60s
    - >-
        curl 
        -H "Content-Type: text/xml" 
        -X POST -H "Authorization: Bearer $token" 
        --data @"outputfile.xml" 
        https://xray.cloud.xpand-it.com/api/v1/import/execution/junit?testExecKey=$XRAY_FUNC_TEST
    - docker logs $(docker ps -a --filter ancestor=iaghcp-docker-technical-architecture.jfrog.io/newman:1.0.0 --format "{{.ID}}")
  after_script:
    - docker stop $(docker ps -a --filter status=running --format "{{.ID}}") > /dev/null
    - docker rm $(docker ps -a -q) -f > /dev/null
    - docker rmi $(docker images -q) -f > /dev/null || true
  when: manual
  artifacts:
    paths:
      - ./outputfile.xml
  only:
    - master
  except:
    - triggers

performance_test_service:
  stage: test application
  before_script:
    - apk update
    - apk upgrade
    - curl -L https://github.com/docker/compose/releases/download/1.14.0/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-compose
    - chmod +x /usr/local/bin/docker-compose
    - apk add --no-cache python3 py3-pip python3-dev
    - apk add --no-cache openssl-dev libffi-dev build-base
    - pip3 install --upgrade pip
    - pip3 install --upgrade setuptools
    - pip3 install cffi
    - pip3 install docker-compose
    - >-
      export token=$(curl -H "Content-Type: application/json" -X POST --data "{ \"client_id\": \"$JIRA_CLIENT_ID\",\"client_secret\": \"$JIRA_SECRET_ID\" }" https://xray.cloud.xpand-it.com/api/v1/authenticate| tr -d '"')
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - export TAG=$CI_COMMIT_REF_NAME 
    - export TEST_NUMBER=$CI_COMMIT_SHA
    - docker-compose -f docker-compose.performance.test.yml up -d
    - sleep 120s
    - >-
        curl 
        -H "Content-Type: text/xml" 
        -X POST -H "Authorization: Bearer $token" 
        --data @"outputfile.xml" 
        https://xray.cloud.xpand-it.com/api/v1/import/execution/junit?testExecKey=$XRAY_PERF_TEST
    - docker logs $(docker ps -a --filter ancestor=iaghcp-docker-technical-architecture.jfrog.io/taurus:1.1.0 --format "{{.ID}}")
  after_script:
    - docker stop $(docker ps -a --filter status=running --format "{{.ID}}") > /dev/null
    - docker rm $(docker ps -a -q) -f > /dev/null
    - docker rmi $(docker images -q) -f > /dev/null || true
  when: manual
  only:
    - master
  except:
    - triggers

push_service_binaries:
  stage: push binaries
  tags:
    - docker-push
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME
    - docker tag $GITLAB_SERVICE_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_SERVICE_IMAGE
    - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$ARTIFACTORY_USER ARTIFACTORY_PASS=$ARTIFACTORY_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_SERVICE_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_GLP_REGISTRY=$URL_GLP_REGISTRY
  only:
    - master
  except:
    - triggers

push_discovery_binaries:
  stage: push binaries
  tags:
    - docker-push
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull $GITLAB_DISCOVERY_REGISTRY:$CI_COMMIT_REF_NAME
    - docker tag $GITLAB_DISCOVERY_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_DISCOVERY_IMAGE
    - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$ARTIFACTORY_USER ARTIFACTORY_PASS=$ARTIFACTORY_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_DISCOVERY_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_GLP_REGISTRY=$URL_GLP_REGISTRY
  only:
    - master
  except:
    - triggers

push_apigateway_binaries:
  stage: push binaries
  tags:
    - docker-push
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull $GITLAB_APIGATEWAY_REGISTRY:$CI_COMMIT_REF_NAME
    - docker tag $GITLAB_APIGATEWAY_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_APIGATEWAY_IMAGE
    - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$ARTIFACTORY_USER ARTIFACTORY_PASS=$ARTIFACTORY_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_APIGATEWAY_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_GLP_REGISTRY=$URL_GLP_REGISTRY
  only:
    - master
  except:
    - triggers

push_db_binaries:
  stage: push binaries
  tags:
    - docker-push
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN registry.gitlab.com
    - docker pull $GITLAB_DB_REGISTRY:$CI_COMMIT_REF_NAME
    - docker tag $GITLAB_DB_REGISTRY:$CI_COMMIT_REF_NAME $CONTAINER_DB_IMAGE
    - make push ARTIFACTORY_URL=$ARTIFACTORY_URL ARTIFACTORY_USER=$ARTIFACTORY_USER ARTIFACTORY_PASS=$ARTIFACTORY_PASS CONTAINER_SERVICE_IMAGE=$CONTAINER_DB_IMAGE DOCKER_REPO_KEY=$DOCKER_REPO_KEY BUILD_NAME=$BUILD_NAME CI_PIPELINE_ID=$CI_PIPELINE_ID URL_GLP_REGISTRY=$URL_GLP_REGISTRY
  only:
    - master
  except:
    - triggers

deploy_staging:
  <<: *deploy
  stage: deploy application
  variables:
    OPENSHIFT_DOMAIN: dit-iaggs.com
    PROJECT: $CI_PROJECT_PATH_SLUG
    DEPLOYMENT_FILE: deployment-review.yml
    OC_URL: $OC_URL_STG
    OC_TOKEN: $OC_TOKEN_STG

    CI_TAG_SERVICE: $CI_PIPELINE_ID
    CI_TAG_DB: $CI_PIPELINE_ID
    CI_TAG_APIGATEWAY: $CI_PIPELINE_ID
    CI_TAG_DISCOVERY: $CI_PIPELINE_ID
    CI_IMG_SERVICE: $CONTAINER_SERVICE_IMAGE
    CI_IMG_DB: $CONTAINER_DB_IMAGE
    CI_IMG_APIGATEWAY: $CONTAINER_APIGATEWAY_IMAGE
    CI_IMG_DISCOVERY: $CONTAINER_DISCOVERY_IMAGE
    TAG_GLOBALCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/stg\/env.sh'
    TAG_SYSTEMCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/glp-userapi-stg\/env.sh'
    REMOTE_APPSETTINGS: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-USERAPI-CONFIG\/stg\/default.json'
  environment:
    name: staging
    url: http://userapi-apigateway-$CI_PROJECT_PATH_SLUG.$OPENSHIFT_DOMAIN
  only:
      - master
  except:
    - triggers

deploy_production:
  <<: *deploy
  stage: deploy application
  variables:
    OPENSHIFT_DOMAIN: apps.ocp01.hcp.iairgroup.com
    PROJECT: ocp01-userapi-stg
    DEPLOYMENT_FILE: deployment.yml
    OC_URL: $OC_URL_PRO
    OC_TOKEN: $OC_TOKEN_PRO

    CI_TAG_SERVICE: $CI_PIPELINE_ID
    CI_TAG_DB: $CI_PIPELINE_ID
    CI_TAG_APIGATEWAY: $CI_PIPELINE_ID
    CI_TAG_DISCOVERY: $CI_PIPELINE_ID
    CI_IMG_SERVICE: $CONTAINER_SERVICE_IMAGE
    CI_IMG_DB: $CONTAINER_DB_IMAGE
    CI_IMG_APIGATEWAY: $CONTAINER_APIGATEWAY_IMAGE
    CI_IMG_DISCOVERY: $CONTAINER_DISCOVERY_IMAGE
    TAG_GLOBALCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/master\/env.sh'
    TAG_SYSTEMCONF: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-STATIC-CONFIG-SETTINGS\/glp-userapi\/env.sh'
    REMOTE_APPSETTINGS: 'https:\/\/raw.githubusercontent.com\/dparra0007\/W53-USERAPI-CONFIG\/master\/default.json'
  environment:
    name: production
    url: http://userapi-apigateway-ocp01-greetingapi-stg.$OPENSHIFT_DOMAIN
  when: manual
  only:
      - master
  except:
    - triggers

functional_regression_test_staging:
  stage: regression test deploy
  image: iaghcp-docker-technical-architecture.jfrog.io/newman:1.0.0
  before_script:
    - apk add --update curl
    - >-
      export token=$(curl -H "Content-Type: application/json" -X POST --data "{ \"client_id\": \"$JIRA_CLIENT_ID\",\"client_secret\": \"$JIRA_SECRET_ID\" }" https://xray.cloud.xpand-it.com/api/v1/authenticate| tr -d '"')
  script:
    - newman run https://www.getpostman.com/collections/f685e5d789063b1093f8 --reporters cli,junit --reporter-junit-export outputfile.xml --environment https://api.getpostman.com/environments/651996-f4ff0aa5-3c70-edbe-ddb1-d81231001eb4?apikey=100822fe2bd7454eb916c8ebdd4be266
    - sed -i -e 's/<testcase/<testcase classname=\"CI\"/g' outputfile.xml
    - >-
        curl 
        -H "Content-Type: text/xml" 
        -X POST -H "Authorization: Bearer $token" 
        --data @"outputfile.xml" 
        https://xray.cloud.xpand-it.com/api/v1/import/execution/junit?testExecKey=$XRAY_REGRESSION_TEST_STG
  only:
      - master

functional_regression_test_production:
  stage: regression test deploy
  image: iaghcp-docker-technical-architecture.jfrog.io/newman:1.0.0
  before_script:
    - apk add --update curl
    - >-
      export token=$(curl -H "Content-Type: application/json" -X POST --data "{ \"client_id\": \"$JIRA_CLIENT_ID\",\"client_secret\": \"$JIRA_SECRET_ID\" }" https://xray.cloud.xpand-it.com/api/v1/authenticate| tr -d '"')
  script:
    - newman run https://www.getpostman.com/collections/f685e5d789063b1093f8 --reporters cli,junit --reporter-junit-export outputfile.xml --environment https://api.getpostman.com/environments/651996-b6820a2c-0306-45c6-b5ab-1db91a8f727e?apikey=100822fe2bd7454eb916c8ebdd4be266
    - sed -i -e 's/<testcase/<testcase classname=\"CI\"/g' outputfile.xml
    - >-
        curl 
        -H "Content-Type: text/xml" 
        -X POST -H "Authorization: Bearer $token" 
        --data @"outputfile.xml" 
        https://xray.cloud.xpand-it.com/api/v1/import/execution/junit?testExecKey=$XRAY_REGRESSION_TEST_PRO
  when: manual
  only:
      - master

stop-review:
  image: iaghcp-docker-technical-architecture.jfrog.io/openshift-cli:1.0.0
  stage: cleanup
  variables:
    PROJECT: $CI_PROJECT_PATH_SLUG-$CI_BUILD_REF_NAME
  before_script:
    - oc login $OC_URL_STG --token $OC_TOKEN_STG --insecure-skip-tls-verify
  script:
    - oc delete project $PROJECT
  when: manual
  environment:
    name: $CI_PROJECT_NAME/$CI_BUILD_REF_NAME
    action: stop
  only:
    - branches
  except:
    - master